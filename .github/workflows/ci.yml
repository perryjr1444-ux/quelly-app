name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ feature/** ]

permissions:
  contents: read
  pull-requests: write

jobs:
  build-and-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4 pinned

      - name: Use Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4 pinned
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --silent

      - name: Typecheck
        run: npm run typecheck --silent

      - name: Test (CI)
        run: npm run test:ci --silent

      - name: Conftest Policy Check
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5 pinned
        with:
          python-version: '3.11'
      - name: Install Conftest and tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.56.0/conftest_0.56.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
      - name: Run policy checks
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch --no-tags --prune --depth=1 origin "${{ github.base_ref }}"
            CHANGED=$(git diff --name-only "origin/${{ github.base_ref }}"...HEAD | sed '/^$/d')
          else
            CHANGED=$(git diff --name-only HEAD^ HEAD | sed '/^$/d')
          fi
          if [ -z "$CHANGED" ]; then echo 'No changed files.' && exit 0; fi
          PAYLOAD=$(printf '%s\n' "$CHANGED" | jq -R . | jq -s '{changed_files: .}')
          echo "$PAYLOAD" | conftest test --policy .policy --input - -

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@b36bf259c813715f76eafece573914b94412cd13
          
      - name: Run npm audit
        run: npm audit --audit-level=moderate

  # Code quality checks
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '18.20.4'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run typecheck

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '18.20.4'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm run test:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          
      - name: Store test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()

  # Build check
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '18.20.4'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          
      - name: Store build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-output
          path: .next/

  # Lighthouse performance audit
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '18.20.4'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@03becbfc543944dd6e7534f7ff768abb8a296826
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouserc.js'

  # SAST scanning
  sast:
    name: SAST Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@b36bf259c813715f76eafece573914b94412cd13
        
      - name: Autobuild
        uses: github/codeql-action/autobuild@b36bf259c813715f76eafece573914b94412cd13
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@b36bf259c813715f76eafece573914b94412cd13

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@2ba636726705b0f74f126ebeaacaf2ad4600b967
        with:
          project: 'PoofPass'
          path: '.'
          format: 'HTML'
          
      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, lint, test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.poofpass.com
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@16e87c0a08142b0d0d33b76aeaf20823c381b9b9
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_SCOPE }}
          
      - name: Run smoke tests
        run: |
          npm run test:e2e:smoke
        env:
          STAGING_URL: https://staging.poofpass.com

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, lint, test, build, sast]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://poofpass.com
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@16e87c0a08142b0d0d33b76aeaf20823c381b9b9
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_SCOPE }}
          
      - name: Purge CDN cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
            
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
